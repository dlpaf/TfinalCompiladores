Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    WHITESPACE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID LBRACE declarations statements RBRACE
Rule 2     declarations -> declaration declarations
Rule 3     declarations -> empty
Rule 4     declaration -> const_decl
Rule 5     declaration -> var_decl
Rule 6     const_decl -> CONST ID ASSIGN constant SEMICOLON
Rule 7     var_decl -> type id_list SEMICOLON
Rule 8     type -> TYPE
Rule 9     id_list -> ID
Rule 10    id_list -> ID COMMA id_list
Rule 11    constant -> NUMBER
Rule 12    constant -> STRING
Rule 13    constant -> BOOL_VAL
Rule 14    statements -> statement statements
Rule 15    statements -> empty
Rule 16    statement -> assignment
Rule 17    statement -> if_statement
Rule 18    statement -> while_statement
Rule 19    statement -> print_statement
Rule 20    statement -> input_statement
Rule 21    statement -> break_statement
Rule 22    break_statement -> BREAK SEMICOLON
Rule 23    assignment -> ID ASSIGN expression SEMICOLON
Rule 24    if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE
Rule 25    if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
Rule 26    while_statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE
Rule 27    print_statement -> PRINT LPAREN expression_list RPAREN SEMICOLON
Rule 28    input_statement -> INPUT LPAREN id_list RPAREN SEMICOLON
Rule 29    expression_list -> expression
Rule 30    expression_list -> expression COMMA expression_list
Rule 31    expression -> term
Rule 32    expression -> expression OP_ARIT term
Rule 33    expression -> expression OP_COMP term
Rule 34    expression -> OP_LOG term
Rule 35    term -> ID
Rule 36    term -> constant
Rule 37    term -> LPAREN expression RPAREN
Rule 38    empty -> <empty>

Terminals, with rules where they appear

ASSIGN               : 6 23
BOOL_VAL             : 13
BREAK                : 22
COMMA                : 10 30
COMMENT              : 
CONST                : 6
ELSE                 : 25
ID                   : 1 6 9 10 23 35
IF                   : 24 25
INPUT                : 28
LBRACE               : 1 24 25 25 26
LPAREN               : 24 25 26 27 28 37
NUMBER               : 11
OP_ARIT              : 32
OP_COMP              : 33
OP_LOG               : 34
PRINT                : 27
PROGRAM              : 1
RBRACE               : 1 24 25 25 26
RPAREN               : 24 25 26 27 28 37
SEMICOLON            : 6 7 22 23 27 28
STRING               : 12
TYPE                 : 8
WHILE                : 26
WHITESPACE           : 
error                : 

Nonterminals, with rules where they appear

assignment           : 16
break_statement      : 21
const_decl           : 4
constant             : 6 36
declaration          : 2
declarations         : 1 2
empty                : 3 15
expression           : 23 24 25 26 29 30 32 33 37
expression_list      : 27 30
id_list              : 7 10 28
if_statement         : 17
input_statement      : 20
print_statement      : 19
program              : 0
statement            : 14
statements           : 1 14 24 25 25 26
term                 : 31 32 33 34
type                 : 7
var_decl             : 5
while_statement      : 18

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID LBRACE declarations statements RBRACE

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID LBRACE declarations statements RBRACE

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . LBRACE declarations statements RBRACE

    LBRACE          shift and go to state 4


state 4

    (1) program -> PROGRAM ID LBRACE . declarations statements RBRACE
    (2) declarations -> . declaration declarations
    (3) declarations -> . empty
    (4) declaration -> . const_decl
    (5) declaration -> . var_decl
    (38) empty -> .
    (6) const_decl -> . CONST ID ASSIGN constant SEMICOLON
    (7) var_decl -> . type id_list SEMICOLON
    (8) type -> . TYPE

    ID              reduce using rule 38 (empty -> .)
    IF              reduce using rule 38 (empty -> .)
    WHILE           reduce using rule 38 (empty -> .)
    PRINT           reduce using rule 38 (empty -> .)
    INPUT           reduce using rule 38 (empty -> .)
    BREAK           reduce using rule 38 (empty -> .)
    RBRACE          reduce using rule 38 (empty -> .)
    CONST           shift and go to state 10
    TYPE            shift and go to state 12

    declarations                   shift and go to state 5
    declaration                    shift and go to state 6
    empty                          shift and go to state 7
    const_decl                     shift and go to state 8
    var_decl                       shift and go to state 9
    type                           shift and go to state 11

state 5

    (1) program -> PROGRAM ID LBRACE declarations . statements RBRACE
    (14) statements -> . statement statements
    (15) statements -> . empty
    (16) statement -> . assignment
    (17) statement -> . if_statement
    (18) statement -> . while_statement
    (19) statement -> . print_statement
    (20) statement -> . input_statement
    (21) statement -> . break_statement
    (38) empty -> .
    (23) assignment -> . ID ASSIGN expression SEMICOLON
    (24) if_statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (25) if_statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (26) while_statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (27) print_statement -> . PRINT LPAREN expression_list RPAREN SEMICOLON
    (28) input_statement -> . INPUT LPAREN id_list RPAREN SEMICOLON
    (22) break_statement -> . BREAK SEMICOLON

    RBRACE          reduce using rule 38 (empty -> .)
    ID              shift and go to state 13
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    PRINT           shift and go to state 25
    INPUT           shift and go to state 26
    BREAK           shift and go to state 27

    statements                     shift and go to state 14
    statement                      shift and go to state 15
    empty                          shift and go to state 16
    assignment                     shift and go to state 17
    if_statement                   shift and go to state 18
    while_statement                shift and go to state 19
    print_statement                shift and go to state 20
    input_statement                shift and go to state 21
    break_statement                shift and go to state 22

state 6

    (2) declarations -> declaration . declarations
    (2) declarations -> . declaration declarations
    (3) declarations -> . empty
    (4) declaration -> . const_decl
    (5) declaration -> . var_decl
    (38) empty -> .
    (6) const_decl -> . CONST ID ASSIGN constant SEMICOLON
    (7) var_decl -> . type id_list SEMICOLON
    (8) type -> . TYPE

    ID              reduce using rule 38 (empty -> .)
    IF              reduce using rule 38 (empty -> .)
    WHILE           reduce using rule 38 (empty -> .)
    PRINT           reduce using rule 38 (empty -> .)
    INPUT           reduce using rule 38 (empty -> .)
    BREAK           reduce using rule 38 (empty -> .)
    RBRACE          reduce using rule 38 (empty -> .)
    CONST           shift and go to state 10
    TYPE            shift and go to state 12

    declaration                    shift and go to state 6
    declarations                   shift and go to state 28
    empty                          shift and go to state 7
    const_decl                     shift and go to state 8
    var_decl                       shift and go to state 9
    type                           shift and go to state 11

state 7

    (3) declarations -> empty .

    ID              reduce using rule 3 (declarations -> empty .)
    IF              reduce using rule 3 (declarations -> empty .)
    WHILE           reduce using rule 3 (declarations -> empty .)
    PRINT           reduce using rule 3 (declarations -> empty .)
    INPUT           reduce using rule 3 (declarations -> empty .)
    BREAK           reduce using rule 3 (declarations -> empty .)
    RBRACE          reduce using rule 3 (declarations -> empty .)


state 8

    (4) declaration -> const_decl .

    CONST           reduce using rule 4 (declaration -> const_decl .)
    TYPE            reduce using rule 4 (declaration -> const_decl .)
    ID              reduce using rule 4 (declaration -> const_decl .)
    IF              reduce using rule 4 (declaration -> const_decl .)
    WHILE           reduce using rule 4 (declaration -> const_decl .)
    PRINT           reduce using rule 4 (declaration -> const_decl .)
    INPUT           reduce using rule 4 (declaration -> const_decl .)
    BREAK           reduce using rule 4 (declaration -> const_decl .)
    RBRACE          reduce using rule 4 (declaration -> const_decl .)


state 9

    (5) declaration -> var_decl .

    CONST           reduce using rule 5 (declaration -> var_decl .)
    TYPE            reduce using rule 5 (declaration -> var_decl .)
    ID              reduce using rule 5 (declaration -> var_decl .)
    IF              reduce using rule 5 (declaration -> var_decl .)
    WHILE           reduce using rule 5 (declaration -> var_decl .)
    PRINT           reduce using rule 5 (declaration -> var_decl .)
    INPUT           reduce using rule 5 (declaration -> var_decl .)
    BREAK           reduce using rule 5 (declaration -> var_decl .)
    RBRACE          reduce using rule 5 (declaration -> var_decl .)


state 10

    (6) const_decl -> CONST . ID ASSIGN constant SEMICOLON

    ID              shift and go to state 29


state 11

    (7) var_decl -> type . id_list SEMICOLON
    (9) id_list -> . ID
    (10) id_list -> . ID COMMA id_list

    ID              shift and go to state 31

    id_list                        shift and go to state 30

state 12

    (8) type -> TYPE .

    ID              reduce using rule 8 (type -> TYPE .)


state 13

    (23) assignment -> ID . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 32


state 14

    (1) program -> PROGRAM ID LBRACE declarations statements . RBRACE

    RBRACE          shift and go to state 33


state 15

    (14) statements -> statement . statements
    (14) statements -> . statement statements
    (15) statements -> . empty
    (16) statement -> . assignment
    (17) statement -> . if_statement
    (18) statement -> . while_statement
    (19) statement -> . print_statement
    (20) statement -> . input_statement
    (21) statement -> . break_statement
    (38) empty -> .
    (23) assignment -> . ID ASSIGN expression SEMICOLON
    (24) if_statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (25) if_statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (26) while_statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (27) print_statement -> . PRINT LPAREN expression_list RPAREN SEMICOLON
    (28) input_statement -> . INPUT LPAREN id_list RPAREN SEMICOLON
    (22) break_statement -> . BREAK SEMICOLON

    RBRACE          reduce using rule 38 (empty -> .)
    ID              shift and go to state 13
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    PRINT           shift and go to state 25
    INPUT           shift and go to state 26
    BREAK           shift and go to state 27

    statement                      shift and go to state 15
    statements                     shift and go to state 34
    empty                          shift and go to state 16
    assignment                     shift and go to state 17
    if_statement                   shift and go to state 18
    while_statement                shift and go to state 19
    print_statement                shift and go to state 20
    input_statement                shift and go to state 21
    break_statement                shift and go to state 22

state 16

    (15) statements -> empty .

    RBRACE          reduce using rule 15 (statements -> empty .)


state 17

    (16) statement -> assignment .

    ID              reduce using rule 16 (statement -> assignment .)
    IF              reduce using rule 16 (statement -> assignment .)
    WHILE           reduce using rule 16 (statement -> assignment .)
    PRINT           reduce using rule 16 (statement -> assignment .)
    INPUT           reduce using rule 16 (statement -> assignment .)
    BREAK           reduce using rule 16 (statement -> assignment .)
    RBRACE          reduce using rule 16 (statement -> assignment .)


state 18

    (17) statement -> if_statement .

    ID              reduce using rule 17 (statement -> if_statement .)
    IF              reduce using rule 17 (statement -> if_statement .)
    WHILE           reduce using rule 17 (statement -> if_statement .)
    PRINT           reduce using rule 17 (statement -> if_statement .)
    INPUT           reduce using rule 17 (statement -> if_statement .)
    BREAK           reduce using rule 17 (statement -> if_statement .)
    RBRACE          reduce using rule 17 (statement -> if_statement .)


state 19

    (18) statement -> while_statement .

    ID              reduce using rule 18 (statement -> while_statement .)
    IF              reduce using rule 18 (statement -> while_statement .)
    WHILE           reduce using rule 18 (statement -> while_statement .)
    PRINT           reduce using rule 18 (statement -> while_statement .)
    INPUT           reduce using rule 18 (statement -> while_statement .)
    BREAK           reduce using rule 18 (statement -> while_statement .)
    RBRACE          reduce using rule 18 (statement -> while_statement .)


state 20

    (19) statement -> print_statement .

    ID              reduce using rule 19 (statement -> print_statement .)
    IF              reduce using rule 19 (statement -> print_statement .)
    WHILE           reduce using rule 19 (statement -> print_statement .)
    PRINT           reduce using rule 19 (statement -> print_statement .)
    INPUT           reduce using rule 19 (statement -> print_statement .)
    BREAK           reduce using rule 19 (statement -> print_statement .)
    RBRACE          reduce using rule 19 (statement -> print_statement .)


state 21

    (20) statement -> input_statement .

    ID              reduce using rule 20 (statement -> input_statement .)
    IF              reduce using rule 20 (statement -> input_statement .)
    WHILE           reduce using rule 20 (statement -> input_statement .)
    PRINT           reduce using rule 20 (statement -> input_statement .)
    INPUT           reduce using rule 20 (statement -> input_statement .)
    BREAK           reduce using rule 20 (statement -> input_statement .)
    RBRACE          reduce using rule 20 (statement -> input_statement .)


state 22

    (21) statement -> break_statement .

    ID              reduce using rule 21 (statement -> break_statement .)
    IF              reduce using rule 21 (statement -> break_statement .)
    WHILE           reduce using rule 21 (statement -> break_statement .)
    PRINT           reduce using rule 21 (statement -> break_statement .)
    INPUT           reduce using rule 21 (statement -> break_statement .)
    BREAK           reduce using rule 21 (statement -> break_statement .)
    RBRACE          reduce using rule 21 (statement -> break_statement .)


state 23

    (24) if_statement -> IF . LPAREN expression RPAREN LBRACE statements RBRACE
    (25) if_statement -> IF . LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE

    LPAREN          shift and go to state 35


state 24

    (26) while_statement -> WHILE . LPAREN expression RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 36


state 25

    (27) print_statement -> PRINT . LPAREN expression_list RPAREN SEMICOLON

    LPAREN          shift and go to state 37


state 26

    (28) input_statement -> INPUT . LPAREN id_list RPAREN SEMICOLON

    LPAREN          shift and go to state 38


state 27

    (22) break_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 39


state 28

    (2) declarations -> declaration declarations .

    ID              reduce using rule 2 (declarations -> declaration declarations .)
    IF              reduce using rule 2 (declarations -> declaration declarations .)
    WHILE           reduce using rule 2 (declarations -> declaration declarations .)
    PRINT           reduce using rule 2 (declarations -> declaration declarations .)
    INPUT           reduce using rule 2 (declarations -> declaration declarations .)
    BREAK           reduce using rule 2 (declarations -> declaration declarations .)
    RBRACE          reduce using rule 2 (declarations -> declaration declarations .)


state 29

    (6) const_decl -> CONST ID . ASSIGN constant SEMICOLON

    ASSIGN          shift and go to state 40


state 30

    (7) var_decl -> type id_list . SEMICOLON

    SEMICOLON       shift and go to state 41


state 31

    (9) id_list -> ID .
    (10) id_list -> ID . COMMA id_list

    SEMICOLON       reduce using rule 9 (id_list -> ID .)
    RPAREN          reduce using rule 9 (id_list -> ID .)
    COMMA           shift and go to state 42


state 32

    (23) assignment -> ID ASSIGN . expression SEMICOLON
    (31) expression -> . term
    (32) expression -> . expression OP_ARIT term
    (33) expression -> . expression OP_COMP term
    (34) expression -> . OP_LOG term
    (35) term -> . ID
    (36) term -> . constant
    (37) term -> . LPAREN expression RPAREN
    (11) constant -> . NUMBER
    (12) constant -> . STRING
    (13) constant -> . BOOL_VAL

    OP_LOG          shift and go to state 46
    ID              shift and go to state 43
    LPAREN          shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    BOOL_VAL        shift and go to state 51

    expression                     shift and go to state 44
    term                           shift and go to state 45
    constant                       shift and go to state 47

state 33

    (1) program -> PROGRAM ID LBRACE declarations statements RBRACE .

    $end            reduce using rule 1 (program -> PROGRAM ID LBRACE declarations statements RBRACE .)


state 34

    (14) statements -> statement statements .

    RBRACE          reduce using rule 14 (statements -> statement statements .)


state 35

    (24) if_statement -> IF LPAREN . expression RPAREN LBRACE statements RBRACE
    (25) if_statement -> IF LPAREN . expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (31) expression -> . term
    (32) expression -> . expression OP_ARIT term
    (33) expression -> . expression OP_COMP term
    (34) expression -> . OP_LOG term
    (35) term -> . ID
    (36) term -> . constant
    (37) term -> . LPAREN expression RPAREN
    (11) constant -> . NUMBER
    (12) constant -> . STRING
    (13) constant -> . BOOL_VAL

    OP_LOG          shift and go to state 46
    ID              shift and go to state 43
    LPAREN          shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    BOOL_VAL        shift and go to state 51

    expression                     shift and go to state 52
    term                           shift and go to state 45
    constant                       shift and go to state 47

state 36

    (26) while_statement -> WHILE LPAREN . expression RPAREN LBRACE statements RBRACE
    (31) expression -> . term
    (32) expression -> . expression OP_ARIT term
    (33) expression -> . expression OP_COMP term
    (34) expression -> . OP_LOG term
    (35) term -> . ID
    (36) term -> . constant
    (37) term -> . LPAREN expression RPAREN
    (11) constant -> . NUMBER
    (12) constant -> . STRING
    (13) constant -> . BOOL_VAL

    OP_LOG          shift and go to state 46
    ID              shift and go to state 43
    LPAREN          shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    BOOL_VAL        shift and go to state 51

    expression                     shift and go to state 53
    term                           shift and go to state 45
    constant                       shift and go to state 47

state 37

    (27) print_statement -> PRINT LPAREN . expression_list RPAREN SEMICOLON
    (29) expression_list -> . expression
    (30) expression_list -> . expression COMMA expression_list
    (31) expression -> . term
    (32) expression -> . expression OP_ARIT term
    (33) expression -> . expression OP_COMP term
    (34) expression -> . OP_LOG term
    (35) term -> . ID
    (36) term -> . constant
    (37) term -> . LPAREN expression RPAREN
    (11) constant -> . NUMBER
    (12) constant -> . STRING
    (13) constant -> . BOOL_VAL

    OP_LOG          shift and go to state 46
    ID              shift and go to state 43
    LPAREN          shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    BOOL_VAL        shift and go to state 51

    expression_list                shift and go to state 54
    expression                     shift and go to state 55
    term                           shift and go to state 45
    constant                       shift and go to state 47

state 38

    (28) input_statement -> INPUT LPAREN . id_list RPAREN SEMICOLON
    (9) id_list -> . ID
    (10) id_list -> . ID COMMA id_list

    ID              shift and go to state 31

    id_list                        shift and go to state 56

state 39

    (22) break_statement -> BREAK SEMICOLON .

    ID              reduce using rule 22 (break_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 22 (break_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 22 (break_statement -> BREAK SEMICOLON .)
    PRINT           reduce using rule 22 (break_statement -> BREAK SEMICOLON .)
    INPUT           reduce using rule 22 (break_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 22 (break_statement -> BREAK SEMICOLON .)
    RBRACE          reduce using rule 22 (break_statement -> BREAK SEMICOLON .)


state 40

    (6) const_decl -> CONST ID ASSIGN . constant SEMICOLON
    (11) constant -> . NUMBER
    (12) constant -> . STRING
    (13) constant -> . BOOL_VAL

    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    BOOL_VAL        shift and go to state 51

    constant                       shift and go to state 57

state 41

    (7) var_decl -> type id_list SEMICOLON .

    CONST           reduce using rule 7 (var_decl -> type id_list SEMICOLON .)
    TYPE            reduce using rule 7 (var_decl -> type id_list SEMICOLON .)
    ID              reduce using rule 7 (var_decl -> type id_list SEMICOLON .)
    IF              reduce using rule 7 (var_decl -> type id_list SEMICOLON .)
    WHILE           reduce using rule 7 (var_decl -> type id_list SEMICOLON .)
    PRINT           reduce using rule 7 (var_decl -> type id_list SEMICOLON .)
    INPUT           reduce using rule 7 (var_decl -> type id_list SEMICOLON .)
    BREAK           reduce using rule 7 (var_decl -> type id_list SEMICOLON .)
    RBRACE          reduce using rule 7 (var_decl -> type id_list SEMICOLON .)


state 42

    (10) id_list -> ID COMMA . id_list
    (9) id_list -> . ID
    (10) id_list -> . ID COMMA id_list

    ID              shift and go to state 31

    id_list                        shift and go to state 58

state 43

    (35) term -> ID .

    SEMICOLON       reduce using rule 35 (term -> ID .)
    OP_ARIT         reduce using rule 35 (term -> ID .)
    OP_COMP         reduce using rule 35 (term -> ID .)
    RPAREN          reduce using rule 35 (term -> ID .)
    COMMA           reduce using rule 35 (term -> ID .)


state 44

    (23) assignment -> ID ASSIGN expression . SEMICOLON
    (32) expression -> expression . OP_ARIT term
    (33) expression -> expression . OP_COMP term

    SEMICOLON       shift and go to state 59
    OP_ARIT         shift and go to state 60
    OP_COMP         shift and go to state 61


state 45

    (31) expression -> term .

    SEMICOLON       reduce using rule 31 (expression -> term .)
    OP_ARIT         reduce using rule 31 (expression -> term .)
    OP_COMP         reduce using rule 31 (expression -> term .)
    RPAREN          reduce using rule 31 (expression -> term .)
    COMMA           reduce using rule 31 (expression -> term .)


state 46

    (34) expression -> OP_LOG . term
    (35) term -> . ID
    (36) term -> . constant
    (37) term -> . LPAREN expression RPAREN
    (11) constant -> . NUMBER
    (12) constant -> . STRING
    (13) constant -> . BOOL_VAL

    ID              shift and go to state 43
    LPAREN          shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    BOOL_VAL        shift and go to state 51

    term                           shift and go to state 62
    constant                       shift and go to state 47

state 47

    (36) term -> constant .

    SEMICOLON       reduce using rule 36 (term -> constant .)
    OP_ARIT         reduce using rule 36 (term -> constant .)
    OP_COMP         reduce using rule 36 (term -> constant .)
    RPAREN          reduce using rule 36 (term -> constant .)
    COMMA           reduce using rule 36 (term -> constant .)


state 48

    (37) term -> LPAREN . expression RPAREN
    (31) expression -> . term
    (32) expression -> . expression OP_ARIT term
    (33) expression -> . expression OP_COMP term
    (34) expression -> . OP_LOG term
    (35) term -> . ID
    (36) term -> . constant
    (37) term -> . LPAREN expression RPAREN
    (11) constant -> . NUMBER
    (12) constant -> . STRING
    (13) constant -> . BOOL_VAL

    OP_LOG          shift and go to state 46
    ID              shift and go to state 43
    LPAREN          shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    BOOL_VAL        shift and go to state 51

    expression                     shift and go to state 63
    term                           shift and go to state 45
    constant                       shift and go to state 47

state 49

    (11) constant -> NUMBER .

    SEMICOLON       reduce using rule 11 (constant -> NUMBER .)
    OP_ARIT         reduce using rule 11 (constant -> NUMBER .)
    OP_COMP         reduce using rule 11 (constant -> NUMBER .)
    RPAREN          reduce using rule 11 (constant -> NUMBER .)
    COMMA           reduce using rule 11 (constant -> NUMBER .)


state 50

    (12) constant -> STRING .

    SEMICOLON       reduce using rule 12 (constant -> STRING .)
    OP_ARIT         reduce using rule 12 (constant -> STRING .)
    OP_COMP         reduce using rule 12 (constant -> STRING .)
    RPAREN          reduce using rule 12 (constant -> STRING .)
    COMMA           reduce using rule 12 (constant -> STRING .)


state 51

    (13) constant -> BOOL_VAL .

    SEMICOLON       reduce using rule 13 (constant -> BOOL_VAL .)
    OP_ARIT         reduce using rule 13 (constant -> BOOL_VAL .)
    OP_COMP         reduce using rule 13 (constant -> BOOL_VAL .)
    RPAREN          reduce using rule 13 (constant -> BOOL_VAL .)
    COMMA           reduce using rule 13 (constant -> BOOL_VAL .)


state 52

    (24) if_statement -> IF LPAREN expression . RPAREN LBRACE statements RBRACE
    (25) if_statement -> IF LPAREN expression . RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (32) expression -> expression . OP_ARIT term
    (33) expression -> expression . OP_COMP term

    RPAREN          shift and go to state 64
    OP_ARIT         shift and go to state 60
    OP_COMP         shift and go to state 61


state 53

    (26) while_statement -> WHILE LPAREN expression . RPAREN LBRACE statements RBRACE
    (32) expression -> expression . OP_ARIT term
    (33) expression -> expression . OP_COMP term

    RPAREN          shift and go to state 65
    OP_ARIT         shift and go to state 60
    OP_COMP         shift and go to state 61


state 54

    (27) print_statement -> PRINT LPAREN expression_list . RPAREN SEMICOLON

    RPAREN          shift and go to state 66


state 55

    (29) expression_list -> expression .
    (30) expression_list -> expression . COMMA expression_list
    (32) expression -> expression . OP_ARIT term
    (33) expression -> expression . OP_COMP term

    RPAREN          reduce using rule 29 (expression_list -> expression .)
    COMMA           shift and go to state 67
    OP_ARIT         shift and go to state 60
    OP_COMP         shift and go to state 61


state 56

    (28) input_statement -> INPUT LPAREN id_list . RPAREN SEMICOLON

    RPAREN          shift and go to state 68


state 57

    (6) const_decl -> CONST ID ASSIGN constant . SEMICOLON

    SEMICOLON       shift and go to state 69


state 58

    (10) id_list -> ID COMMA id_list .

    SEMICOLON       reduce using rule 10 (id_list -> ID COMMA id_list .)
    RPAREN          reduce using rule 10 (id_list -> ID COMMA id_list .)


state 59

    (23) assignment -> ID ASSIGN expression SEMICOLON .

    ID              reduce using rule 23 (assignment -> ID ASSIGN expression SEMICOLON .)
    IF              reduce using rule 23 (assignment -> ID ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 23 (assignment -> ID ASSIGN expression SEMICOLON .)
    PRINT           reduce using rule 23 (assignment -> ID ASSIGN expression SEMICOLON .)
    INPUT           reduce using rule 23 (assignment -> ID ASSIGN expression SEMICOLON .)
    BREAK           reduce using rule 23 (assignment -> ID ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 23 (assignment -> ID ASSIGN expression SEMICOLON .)


state 60

    (32) expression -> expression OP_ARIT . term
    (35) term -> . ID
    (36) term -> . constant
    (37) term -> . LPAREN expression RPAREN
    (11) constant -> . NUMBER
    (12) constant -> . STRING
    (13) constant -> . BOOL_VAL

    ID              shift and go to state 43
    LPAREN          shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    BOOL_VAL        shift and go to state 51

    term                           shift and go to state 70
    constant                       shift and go to state 47

state 61

    (33) expression -> expression OP_COMP . term
    (35) term -> . ID
    (36) term -> . constant
    (37) term -> . LPAREN expression RPAREN
    (11) constant -> . NUMBER
    (12) constant -> . STRING
    (13) constant -> . BOOL_VAL

    ID              shift and go to state 43
    LPAREN          shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    BOOL_VAL        shift and go to state 51

    term                           shift and go to state 71
    constant                       shift and go to state 47

state 62

    (34) expression -> OP_LOG term .

    SEMICOLON       reduce using rule 34 (expression -> OP_LOG term .)
    OP_ARIT         reduce using rule 34 (expression -> OP_LOG term .)
    OP_COMP         reduce using rule 34 (expression -> OP_LOG term .)
    RPAREN          reduce using rule 34 (expression -> OP_LOG term .)
    COMMA           reduce using rule 34 (expression -> OP_LOG term .)


state 63

    (37) term -> LPAREN expression . RPAREN
    (32) expression -> expression . OP_ARIT term
    (33) expression -> expression . OP_COMP term

    RPAREN          shift and go to state 72
    OP_ARIT         shift and go to state 60
    OP_COMP         shift and go to state 61


state 64

    (24) if_statement -> IF LPAREN expression RPAREN . LBRACE statements RBRACE
    (25) if_statement -> IF LPAREN expression RPAREN . LBRACE statements RBRACE ELSE LBRACE statements RBRACE

    LBRACE          shift and go to state 73


state 65

    (26) while_statement -> WHILE LPAREN expression RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 74


state 66

    (27) print_statement -> PRINT LPAREN expression_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 75


state 67

    (30) expression_list -> expression COMMA . expression_list
    (29) expression_list -> . expression
    (30) expression_list -> . expression COMMA expression_list
    (31) expression -> . term
    (32) expression -> . expression OP_ARIT term
    (33) expression -> . expression OP_COMP term
    (34) expression -> . OP_LOG term
    (35) term -> . ID
    (36) term -> . constant
    (37) term -> . LPAREN expression RPAREN
    (11) constant -> . NUMBER
    (12) constant -> . STRING
    (13) constant -> . BOOL_VAL

    OP_LOG          shift and go to state 46
    ID              shift and go to state 43
    LPAREN          shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    BOOL_VAL        shift and go to state 51

    expression                     shift and go to state 55
    expression_list                shift and go to state 76
    term                           shift and go to state 45
    constant                       shift and go to state 47

state 68

    (28) input_statement -> INPUT LPAREN id_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 77


state 69

    (6) const_decl -> CONST ID ASSIGN constant SEMICOLON .

    CONST           reduce using rule 6 (const_decl -> CONST ID ASSIGN constant SEMICOLON .)
    TYPE            reduce using rule 6 (const_decl -> CONST ID ASSIGN constant SEMICOLON .)
    ID              reduce using rule 6 (const_decl -> CONST ID ASSIGN constant SEMICOLON .)
    IF              reduce using rule 6 (const_decl -> CONST ID ASSIGN constant SEMICOLON .)
    WHILE           reduce using rule 6 (const_decl -> CONST ID ASSIGN constant SEMICOLON .)
    PRINT           reduce using rule 6 (const_decl -> CONST ID ASSIGN constant SEMICOLON .)
    INPUT           reduce using rule 6 (const_decl -> CONST ID ASSIGN constant SEMICOLON .)
    BREAK           reduce using rule 6 (const_decl -> CONST ID ASSIGN constant SEMICOLON .)
    RBRACE          reduce using rule 6 (const_decl -> CONST ID ASSIGN constant SEMICOLON .)


state 70

    (32) expression -> expression OP_ARIT term .

    SEMICOLON       reduce using rule 32 (expression -> expression OP_ARIT term .)
    OP_ARIT         reduce using rule 32 (expression -> expression OP_ARIT term .)
    OP_COMP         reduce using rule 32 (expression -> expression OP_ARIT term .)
    RPAREN          reduce using rule 32 (expression -> expression OP_ARIT term .)
    COMMA           reduce using rule 32 (expression -> expression OP_ARIT term .)


state 71

    (33) expression -> expression OP_COMP term .

    SEMICOLON       reduce using rule 33 (expression -> expression OP_COMP term .)
    OP_ARIT         reduce using rule 33 (expression -> expression OP_COMP term .)
    OP_COMP         reduce using rule 33 (expression -> expression OP_COMP term .)
    RPAREN          reduce using rule 33 (expression -> expression OP_COMP term .)
    COMMA           reduce using rule 33 (expression -> expression OP_COMP term .)


state 72

    (37) term -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 37 (term -> LPAREN expression RPAREN .)
    OP_ARIT         reduce using rule 37 (term -> LPAREN expression RPAREN .)
    OP_COMP         reduce using rule 37 (term -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 37 (term -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 37 (term -> LPAREN expression RPAREN .)


state 73

    (24) if_statement -> IF LPAREN expression RPAREN LBRACE . statements RBRACE
    (25) if_statement -> IF LPAREN expression RPAREN LBRACE . statements RBRACE ELSE LBRACE statements RBRACE
    (14) statements -> . statement statements
    (15) statements -> . empty
    (16) statement -> . assignment
    (17) statement -> . if_statement
    (18) statement -> . while_statement
    (19) statement -> . print_statement
    (20) statement -> . input_statement
    (21) statement -> . break_statement
    (38) empty -> .
    (23) assignment -> . ID ASSIGN expression SEMICOLON
    (24) if_statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (25) if_statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (26) while_statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (27) print_statement -> . PRINT LPAREN expression_list RPAREN SEMICOLON
    (28) input_statement -> . INPUT LPAREN id_list RPAREN SEMICOLON
    (22) break_statement -> . BREAK SEMICOLON

    RBRACE          reduce using rule 38 (empty -> .)
    ID              shift and go to state 13
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    PRINT           shift and go to state 25
    INPUT           shift and go to state 26
    BREAK           shift and go to state 27

    statements                     shift and go to state 78
    statement                      shift and go to state 15
    empty                          shift and go to state 16
    assignment                     shift and go to state 17
    if_statement                   shift and go to state 18
    while_statement                shift and go to state 19
    print_statement                shift and go to state 20
    input_statement                shift and go to state 21
    break_statement                shift and go to state 22

state 74

    (26) while_statement -> WHILE LPAREN expression RPAREN LBRACE . statements RBRACE
    (14) statements -> . statement statements
    (15) statements -> . empty
    (16) statement -> . assignment
    (17) statement -> . if_statement
    (18) statement -> . while_statement
    (19) statement -> . print_statement
    (20) statement -> . input_statement
    (21) statement -> . break_statement
    (38) empty -> .
    (23) assignment -> . ID ASSIGN expression SEMICOLON
    (24) if_statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (25) if_statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (26) while_statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (27) print_statement -> . PRINT LPAREN expression_list RPAREN SEMICOLON
    (28) input_statement -> . INPUT LPAREN id_list RPAREN SEMICOLON
    (22) break_statement -> . BREAK SEMICOLON

    RBRACE          reduce using rule 38 (empty -> .)
    ID              shift and go to state 13
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    PRINT           shift and go to state 25
    INPUT           shift and go to state 26
    BREAK           shift and go to state 27

    statements                     shift and go to state 79
    statement                      shift and go to state 15
    empty                          shift and go to state 16
    assignment                     shift and go to state 17
    if_statement                   shift and go to state 18
    while_statement                shift and go to state 19
    print_statement                shift and go to state 20
    input_statement                shift and go to state 21
    break_statement                shift and go to state 22

state 75

    (27) print_statement -> PRINT LPAREN expression_list RPAREN SEMICOLON .

    ID              reduce using rule 27 (print_statement -> PRINT LPAREN expression_list RPAREN SEMICOLON .)
    IF              reduce using rule 27 (print_statement -> PRINT LPAREN expression_list RPAREN SEMICOLON .)
    WHILE           reduce using rule 27 (print_statement -> PRINT LPAREN expression_list RPAREN SEMICOLON .)
    PRINT           reduce using rule 27 (print_statement -> PRINT LPAREN expression_list RPAREN SEMICOLON .)
    INPUT           reduce using rule 27 (print_statement -> PRINT LPAREN expression_list RPAREN SEMICOLON .)
    BREAK           reduce using rule 27 (print_statement -> PRINT LPAREN expression_list RPAREN SEMICOLON .)
    RBRACE          reduce using rule 27 (print_statement -> PRINT LPAREN expression_list RPAREN SEMICOLON .)


state 76

    (30) expression_list -> expression COMMA expression_list .

    RPAREN          reduce using rule 30 (expression_list -> expression COMMA expression_list .)


state 77

    (28) input_statement -> INPUT LPAREN id_list RPAREN SEMICOLON .

    ID              reduce using rule 28 (input_statement -> INPUT LPAREN id_list RPAREN SEMICOLON .)
    IF              reduce using rule 28 (input_statement -> INPUT LPAREN id_list RPAREN SEMICOLON .)
    WHILE           reduce using rule 28 (input_statement -> INPUT LPAREN id_list RPAREN SEMICOLON .)
    PRINT           reduce using rule 28 (input_statement -> INPUT LPAREN id_list RPAREN SEMICOLON .)
    INPUT           reduce using rule 28 (input_statement -> INPUT LPAREN id_list RPAREN SEMICOLON .)
    BREAK           reduce using rule 28 (input_statement -> INPUT LPAREN id_list RPAREN SEMICOLON .)
    RBRACE          reduce using rule 28 (input_statement -> INPUT LPAREN id_list RPAREN SEMICOLON .)


state 78

    (24) if_statement -> IF LPAREN expression RPAREN LBRACE statements . RBRACE
    (25) if_statement -> IF LPAREN expression RPAREN LBRACE statements . RBRACE ELSE LBRACE statements RBRACE

    RBRACE          shift and go to state 80


state 79

    (26) while_statement -> WHILE LPAREN expression RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 81


state 80

    (24) if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .
    (25) if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE . ELSE LBRACE statements RBRACE

    ID              reduce using rule 24 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 24 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 24 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    PRINT           reduce using rule 24 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    INPUT           reduce using rule 24 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    BREAK           reduce using rule 24 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 24 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    ELSE            shift and go to state 82


state 81

    (26) while_statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .

    ID              reduce using rule 26 (while_statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 26 (while_statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 26 (while_statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    PRINT           reduce using rule 26 (while_statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    INPUT           reduce using rule 26 (while_statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    BREAK           reduce using rule 26 (while_statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 26 (while_statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)


state 82

    (25) if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE . LBRACE statements RBRACE

    LBRACE          shift and go to state 83


state 83

    (25) if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE . statements RBRACE
    (14) statements -> . statement statements
    (15) statements -> . empty
    (16) statement -> . assignment
    (17) statement -> . if_statement
    (18) statement -> . while_statement
    (19) statement -> . print_statement
    (20) statement -> . input_statement
    (21) statement -> . break_statement
    (38) empty -> .
    (23) assignment -> . ID ASSIGN expression SEMICOLON
    (24) if_statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (25) if_statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (26) while_statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (27) print_statement -> . PRINT LPAREN expression_list RPAREN SEMICOLON
    (28) input_statement -> . INPUT LPAREN id_list RPAREN SEMICOLON
    (22) break_statement -> . BREAK SEMICOLON

    RBRACE          reduce using rule 38 (empty -> .)
    ID              shift and go to state 13
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    PRINT           shift and go to state 25
    INPUT           shift and go to state 26
    BREAK           shift and go to state 27

    statements                     shift and go to state 84
    statement                      shift and go to state 15
    empty                          shift and go to state 16
    assignment                     shift and go to state 17
    if_statement                   shift and go to state 18
    while_statement                shift and go to state 19
    print_statement                shift and go to state 20
    input_statement                shift and go to state 21
    break_statement                shift and go to state 22

state 84

    (25) if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements . RBRACE

    RBRACE          shift and go to state 85


state 85

    (25) if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .

    ID              reduce using rule 25 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    IF              reduce using rule 25 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    WHILE           reduce using rule 25 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    PRINT           reduce using rule 25 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    INPUT           reduce using rule 25 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    BREAK           reduce using rule 25 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    RBRACE          reduce using rule 25 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)

