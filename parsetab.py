
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftOP_COMPleftOP_ARITrightOP_LOGASSIGN BOOL_VAL BREAK COMMA COMMENT CONST ELSE ID IF INPUT LBRACE LPAREN NUMBER OP_ARIT OP_COMP OP_LOG PRINT PROGRAM RBRACE RPAREN SEMICOLON STRING TYPE WHILE WHITESPACEprogram : PROGRAM ID LBRACE statements RBRACEstatements : statement statements\n                     | emptystatement : assignment\n                    | declaration\n                    | if_statement\n                    | while_statement\n                    | print_statement\n                    | input_statement\n                    | break_statementdeclaration : const_decl\n                      | var_declconst_decl : CONST ID ASSIGN constant SEMICOLONvar_decl : type id_list SEMICOLONtype : TYPEid_list : ID\n                  | ID COMMA id_listconstant : NUMBER\n                   | STRING\n                   | BOOL_VALbreak_statement : BREAK SEMICOLONassignment : ID ASSIGN expression SEMICOLONif_statement : IF LPAREN expression RPAREN LBRACE statements RBRACE\n                       | IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACEwhile_statement : WHILE LPAREN expression RPAREN LBRACE statements RBRACEprint_statement : PRINT LPAREN expression_list RPAREN SEMICOLONinput_statement : INPUT LPAREN id_list RPAREN SEMICOLONexpression_list : expression\n                         | expression COMMA expression_listexpression : term\n                     | expression OP_ARIT term\n                     | expression OP_COMP term\n                     | OP_LOG termterm : ID\n                | constant\n                | LPAREN expression RPARENempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,27,],[0,-1,]),'ID':([2,4,7,9,10,11,12,13,14,15,16,17,23,24,25,26,29,30,31,32,33,40,42,52,53,54,55,56,62,69,70,71,73,74,77,78,80,82,],[3,5,5,-4,-5,-6,-7,-8,-9,-10,-11,-12,34,36,-15,37,37,37,37,36,-21,37,37,-14,36,-22,37,37,37,5,5,-26,-27,-13,-23,-25,5,-24,]),'LBRACE':([3,59,60,79,],[4,69,70,80,]),'RBRACE':([4,6,7,8,9,10,11,12,13,14,15,16,17,28,33,52,54,69,70,71,73,74,75,76,77,78,80,81,82,],[-37,27,-37,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-21,-14,-22,-37,-37,-26,-27,-13,77,78,-23,-25,-37,82,-24,]),'IF':([4,7,9,10,11,12,13,14,15,16,17,33,52,54,69,70,71,73,74,77,78,80,82,],[18,18,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,-14,-22,18,18,-26,-27,-13,-23,-25,18,-24,]),'WHILE':([4,7,9,10,11,12,13,14,15,16,17,33,52,54,69,70,71,73,74,77,78,80,82,],[19,19,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,-14,-22,19,19,-26,-27,-13,-23,-25,19,-24,]),'PRINT':([4,7,9,10,11,12,13,14,15,16,17,33,52,54,69,70,71,73,74,77,78,80,82,],[20,20,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,-14,-22,20,20,-26,-27,-13,-23,-25,20,-24,]),'INPUT':([4,7,9,10,11,12,13,14,15,16,17,33,52,54,69,70,71,73,74,77,78,80,82,],[21,21,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,-14,-22,21,21,-26,-27,-13,-23,-25,21,-24,]),'BREAK':([4,7,9,10,11,12,13,14,15,16,17,33,52,54,69,70,71,73,74,77,78,80,82,],[22,22,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,-14,-22,22,22,-26,-27,-13,-23,-25,22,-24,]),'CONST':([4,7,9,10,11,12,13,14,15,16,17,33,52,54,69,70,71,73,74,77,78,80,82,],[23,23,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,-14,-22,23,23,-26,-27,-13,-23,-25,23,-24,]),'TYPE':([4,7,9,10,11,12,13,14,15,16,17,33,52,54,69,70,71,73,74,77,78,80,82,],[25,25,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,-14,-22,25,25,-26,-27,-13,-23,-25,25,-24,]),'ASSIGN':([5,34,],[26,51,]),'LPAREN':([18,19,20,21,26,29,30,31,40,42,55,56,62,],[29,30,31,32,42,42,42,42,42,42,42,42,42,]),'SEMICOLON':([22,35,36,37,38,39,41,43,44,45,57,61,63,64,65,66,67,68,],[33,52,-16,-34,54,-30,-35,-18,-19,-20,-33,71,73,74,-17,-31,-32,-36,]),'OP_LOG':([26,29,30,31,42,62,],[40,40,40,40,40,40,]),'NUMBER':([26,29,30,31,40,42,51,55,56,62,],[43,43,43,43,43,43,43,43,43,43,]),'STRING':([26,29,30,31,40,42,51,55,56,62,],[44,44,44,44,44,44,44,44,44,44,]),'BOOL_VAL':([26,29,30,31,40,42,51,55,56,62,],[45,45,45,45,45,45,45,45,45,45,]),'RPAREN':([36,37,39,41,43,44,45,46,47,48,49,50,57,58,65,66,67,68,72,],[-16,-34,-30,-35,-18,-19,-20,59,60,61,-28,63,-33,68,-17,-31,-32,-36,-29,]),'COMMA':([36,37,39,41,43,44,45,49,57,66,67,68,],[53,-34,-30,-35,-18,-19,-20,62,-33,-31,-32,-36,]),'OP_ARIT':([37,38,39,41,43,44,45,46,47,49,57,58,66,67,68,],[-34,55,-30,-35,-18,-19,-20,55,55,55,-33,55,-31,-32,-36,]),'OP_COMP':([37,38,39,41,43,44,45,46,47,49,57,58,66,67,68,],[-34,56,-30,-35,-18,-19,-20,56,56,56,-33,56,-31,-32,-36,]),'ELSE':([77,],[79,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([4,7,69,70,80,],[6,28,75,76,81,]),'statement':([4,7,69,70,80,],[7,7,7,7,7,]),'empty':([4,7,69,70,80,],[8,8,8,8,8,]),'assignment':([4,7,69,70,80,],[9,9,9,9,9,]),'declaration':([4,7,69,70,80,],[10,10,10,10,10,]),'if_statement':([4,7,69,70,80,],[11,11,11,11,11,]),'while_statement':([4,7,69,70,80,],[12,12,12,12,12,]),'print_statement':([4,7,69,70,80,],[13,13,13,13,13,]),'input_statement':([4,7,69,70,80,],[14,14,14,14,14,]),'break_statement':([4,7,69,70,80,],[15,15,15,15,15,]),'const_decl':([4,7,69,70,80,],[16,16,16,16,16,]),'var_decl':([4,7,69,70,80,],[17,17,17,17,17,]),'type':([4,7,69,70,80,],[24,24,24,24,24,]),'id_list':([24,32,53,],[35,50,65,]),'expression':([26,29,30,31,42,62,],[38,46,47,49,58,49,]),'term':([26,29,30,31,40,42,55,56,62,],[39,39,39,39,57,39,66,67,39,]),'constant':([26,29,30,31,40,42,51,55,56,62,],[41,41,41,41,41,41,64,41,41,41,]),'expression_list':([31,62,],[48,72,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID LBRACE statements RBRACE','program',5,'p_program','parser.py',54),
  ('statements -> statement statements','statements',2,'p_statements','parser.py',60),
  ('statements -> empty','statements',1,'p_statements','parser.py',61),
  ('statement -> assignment','statement',1,'p_statement','parser.py',72),
  ('statement -> declaration','statement',1,'p_statement','parser.py',73),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',74),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',75),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',76),
  ('statement -> input_statement','statement',1,'p_statement','parser.py',77),
  ('statement -> break_statement','statement',1,'p_statement','parser.py',78),
  ('declaration -> const_decl','declaration',1,'p_declaration','parser.py',82),
  ('declaration -> var_decl','declaration',1,'p_declaration','parser.py',83),
  ('const_decl -> CONST ID ASSIGN constant SEMICOLON','const_decl',5,'p_const_decl','parser.py',87),
  ('var_decl -> type id_list SEMICOLON','var_decl',3,'p_var_decl','parser.py',91),
  ('type -> TYPE','type',1,'p_type','parser.py',95),
  ('id_list -> ID','id_list',1,'p_id_list','parser.py',99),
  ('id_list -> ID COMMA id_list','id_list',3,'p_id_list','parser.py',100),
  ('constant -> NUMBER','constant',1,'p_constant','parser.py',107),
  ('constant -> STRING','constant',1,'p_constant','parser.py',108),
  ('constant -> BOOL_VAL','constant',1,'p_constant','parser.py',109),
  ('break_statement -> BREAK SEMICOLON','break_statement',2,'p_break_statement','parser.py',113),
  ('assignment -> ID ASSIGN expression SEMICOLON','assignment',4,'p_assignment','parser.py',117),
  ('if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE','if_statement',7,'p_if_statement','parser.py',121),
  ('if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE','if_statement',11,'p_if_statement','parser.py',122),
  ('while_statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE','while_statement',7,'p_while_statement','parser.py',129),
  ('print_statement -> PRINT LPAREN expression_list RPAREN SEMICOLON','print_statement',5,'p_print_statement','parser.py',133),
  ('input_statement -> INPUT LPAREN id_list RPAREN SEMICOLON','input_statement',5,'p_input_statement','parser.py',137),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',141),
  ('expression_list -> expression COMMA expression_list','expression_list',3,'p_expression_list','parser.py',142),
  ('expression -> term','expression',1,'p_expression','parser.py',149),
  ('expression -> expression OP_ARIT term','expression',3,'p_expression','parser.py',150),
  ('expression -> expression OP_COMP term','expression',3,'p_expression','parser.py',151),
  ('expression -> OP_LOG term','expression',2,'p_expression','parser.py',152),
  ('term -> ID','term',1,'p_term','parser.py',161),
  ('term -> constant','term',1,'p_term','parser.py',162),
  ('term -> LPAREN expression RPAREN','term',3,'p_term','parser.py',163),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',173),
]
