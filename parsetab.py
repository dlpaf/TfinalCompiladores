
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftOP_COMPleftOP_ARITrightOP_LOGASSIGN BOOL_VAL BREAK COMMA COMMENT CONST ELSE ID IF INPUT LBRACE LPAREN NUMBER OP_ARIT OP_COMP OP_LOG PRINT PROGRAM RBRACE RPAREN SEMICOLON STRING TYPE WHILE WHITESPACEprogram : PROGRAM ID LBRACE declarations statements RBRACEdeclarations : declaration declarations\n| emptydeclaration : const_decl\n| var_declconst_decl : CONST ID ASSIGN constant SEMICOLONvar_decl : type id_list SEMICOLONtype : TYPEid_list : ID\n| ID COMMA id_listconstant : NUMBER\n| STRING\n| BOOL_VALstatements : statement statements\n| emptystatement : assignment\n| if_statement\n| while_statement\n| print_statement\n| input_statement\n| break_statementbreak_statement : BREAK SEMICOLONassignment : ID ASSIGN expression SEMICOLONif_statement : IF LPAREN expression RPAREN LBRACE statements RBRACE\n| IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACEwhile_statement : WHILE LPAREN expression RPAREN LBRACE statements RBRACEprint_statement : PRINT LPAREN expression_list RPAREN SEMICOLONinput_statement : INPUT LPAREN id_list RPAREN SEMICOLONexpression_list : expression\n| expression COMMA expression_listexpression : term\n| expression OP_ARIT term\n| expression OP_COMP term\n| OP_LOG termterm : ID\n| constant\n| LPAREN expression RPARENempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,33,],[0,-1,]),'ID':([2,4,5,6,7,8,9,10,11,12,15,17,18,19,20,21,22,28,32,35,36,37,38,39,41,42,46,48,59,60,61,67,69,73,74,75,77,80,81,83,85,],[3,-38,13,-38,-3,-4,-5,29,31,-8,13,-16,-17,-18,-19,-20,-21,-2,43,43,43,43,31,-22,-7,31,43,43,-23,43,43,43,-6,13,13,-27,-28,-24,-26,13,-25,]),'LBRACE':([3,64,65,82,],[4,73,74,83,]),'IF':([4,5,6,7,8,9,15,17,18,19,20,21,22,28,39,41,59,69,73,74,75,77,80,81,83,85,],[-38,23,-38,-3,-4,-5,23,-16,-17,-18,-19,-20,-21,-2,-22,-7,-23,-6,23,23,-27,-28,-24,-26,23,-25,]),'WHILE':([4,5,6,7,8,9,15,17,18,19,20,21,22,28,39,41,59,69,73,74,75,77,80,81,83,85,],[-38,24,-38,-3,-4,-5,24,-16,-17,-18,-19,-20,-21,-2,-22,-7,-23,-6,24,24,-27,-28,-24,-26,24,-25,]),'PRINT':([4,5,6,7,8,9,15,17,18,19,20,21,22,28,39,41,59,69,73,74,75,77,80,81,83,85,],[-38,25,-38,-3,-4,-5,25,-16,-17,-18,-19,-20,-21,-2,-22,-7,-23,-6,25,25,-27,-28,-24,-26,25,-25,]),'INPUT':([4,5,6,7,8,9,15,17,18,19,20,21,22,28,39,41,59,69,73,74,75,77,80,81,83,85,],[-38,26,-38,-3,-4,-5,26,-16,-17,-18,-19,-20,-21,-2,-22,-7,-23,-6,26,26,-27,-28,-24,-26,26,-25,]),'BREAK':([4,5,6,7,8,9,15,17,18,19,20,21,22,28,39,41,59,69,73,74,75,77,80,81,83,85,],[-38,27,-38,-3,-4,-5,27,-16,-17,-18,-19,-20,-21,-2,-22,-7,-23,-6,27,27,-27,-28,-24,-26,27,-25,]),'RBRACE':([4,5,6,7,8,9,14,15,16,17,18,19,20,21,22,28,34,39,41,59,69,73,74,75,77,78,79,80,81,83,84,85,],[-38,-38,-38,-3,-4,-5,33,-38,-15,-16,-17,-18,-19,-20,-21,-2,-14,-22,-7,-23,-6,-38,-38,-27,-28,80,81,-24,-26,-38,85,-25,]),'CONST':([4,6,8,9,41,69,],[10,10,-4,-5,-7,-6,]),'TYPE':([4,6,8,9,41,69,],[12,12,-4,-5,-7,-6,]),'ASSIGN':([13,29,],[32,40,]),'LPAREN':([23,24,25,26,32,35,36,37,46,48,60,61,67,],[35,36,37,38,48,48,48,48,48,48,48,48,48,]),'SEMICOLON':([27,30,31,43,44,45,47,49,50,51,57,58,62,66,68,70,71,72,],[39,41,-9,-35,59,-31,-36,-11,-12,-13,69,-10,-34,75,77,-32,-33,-37,]),'RPAREN':([31,43,45,47,49,50,51,52,53,54,55,56,58,62,63,70,71,72,76,],[-9,-35,-31,-36,-11,-12,-13,64,65,66,-29,68,-10,-34,72,-32,-33,-37,-30,]),'COMMA':([31,43,45,47,49,50,51,55,62,70,71,72,],[42,-35,-31,-36,-11,-12,-13,67,-34,-32,-33,-37,]),'OP_LOG':([32,35,36,37,48,67,],[46,46,46,46,46,46,]),'NUMBER':([32,35,36,37,40,46,48,60,61,67,],[49,49,49,49,49,49,49,49,49,49,]),'STRING':([32,35,36,37,40,46,48,60,61,67,],[50,50,50,50,50,50,50,50,50,50,]),'BOOL_VAL':([32,35,36,37,40,46,48,60,61,67,],[51,51,51,51,51,51,51,51,51,51,]),'OP_ARIT':([43,44,45,47,49,50,51,52,53,55,62,63,70,71,72,],[-35,60,-31,-36,-11,-12,-13,60,60,60,-34,60,-32,-33,-37,]),'OP_COMP':([43,44,45,47,49,50,51,52,53,55,62,63,70,71,72,],[-35,61,-31,-36,-11,-12,-13,61,61,61,-34,61,-32,-33,-37,]),'ELSE':([80,],[82,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([4,6,],[5,28,]),'declaration':([4,6,],[6,6,]),'empty':([4,5,6,15,73,74,83,],[7,16,7,16,16,16,16,]),'const_decl':([4,6,],[8,8,]),'var_decl':([4,6,],[9,9,]),'type':([4,6,],[11,11,]),'statements':([5,15,73,74,83,],[14,34,78,79,84,]),'statement':([5,15,73,74,83,],[15,15,15,15,15,]),'assignment':([5,15,73,74,83,],[17,17,17,17,17,]),'if_statement':([5,15,73,74,83,],[18,18,18,18,18,]),'while_statement':([5,15,73,74,83,],[19,19,19,19,19,]),'print_statement':([5,15,73,74,83,],[20,20,20,20,20,]),'input_statement':([5,15,73,74,83,],[21,21,21,21,21,]),'break_statement':([5,15,73,74,83,],[22,22,22,22,22,]),'id_list':([11,38,42,],[30,56,58,]),'expression':([32,35,36,37,48,67,],[44,52,53,55,63,55,]),'term':([32,35,36,37,46,48,60,61,67,],[45,45,45,45,62,45,70,71,45,]),'constant':([32,35,36,37,40,46,48,60,61,67,],[47,47,47,47,57,47,47,47,47,47,]),'expression_list':([37,67,],[54,76,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID LBRACE declarations statements RBRACE','program',6,'p_program','parser.py',34),
  ('declarations -> declaration declarations','declarations',2,'p_declarations','parser.py',38),
  ('declarations -> empty','declarations',1,'p_declarations','parser.py',39),
  ('declaration -> const_decl','declaration',1,'p_declaration','parser.py',50),
  ('declaration -> var_decl','declaration',1,'p_declaration','parser.py',51),
  ('const_decl -> CONST ID ASSIGN constant SEMICOLON','const_decl',5,'p_const_decl','parser.py',55),
  ('var_decl -> type id_list SEMICOLON','var_decl',3,'p_var_decl','parser.py',59),
  ('type -> TYPE','type',1,'p_type','parser.py',63),
  ('id_list -> ID','id_list',1,'p_id_list','parser.py',67),
  ('id_list -> ID COMMA id_list','id_list',3,'p_id_list','parser.py',68),
  ('constant -> NUMBER','constant',1,'p_constant','parser.py',75),
  ('constant -> STRING','constant',1,'p_constant','parser.py',76),
  ('constant -> BOOL_VAL','constant',1,'p_constant','parser.py',77),
  ('statements -> statement statements','statements',2,'p_statements','parser.py',81),
  ('statements -> empty','statements',1,'p_statements','parser.py',82),
  ('statement -> assignment','statement',1,'p_statement','parser.py',93),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',94),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',95),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',96),
  ('statement -> input_statement','statement',1,'p_statement','parser.py',97),
  ('statement -> break_statement','statement',1,'p_statement','parser.py',98),
  ('break_statement -> BREAK SEMICOLON','break_statement',2,'p_break_statement','parser.py',102),
  ('assignment -> ID ASSIGN expression SEMICOLON','assignment',4,'p_assignment','parser.py',106),
  ('if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE','if_statement',7,'p_if_statement','parser.py',110),
  ('if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE','if_statement',11,'p_if_statement','parser.py',111),
  ('while_statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE','while_statement',7,'p_while_statement','parser.py',118),
  ('print_statement -> PRINT LPAREN expression_list RPAREN SEMICOLON','print_statement',5,'p_print_statement','parser.py',122),
  ('input_statement -> INPUT LPAREN id_list RPAREN SEMICOLON','input_statement',5,'p_input_statement','parser.py',126),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',130),
  ('expression_list -> expression COMMA expression_list','expression_list',3,'p_expression_list','parser.py',131),
  ('expression -> term','expression',1,'p_expression','parser.py',138),
  ('expression -> expression OP_ARIT term','expression',3,'p_expression','parser.py',139),
  ('expression -> expression OP_COMP term','expression',3,'p_expression','parser.py',140),
  ('expression -> OP_LOG term','expression',2,'p_expression','parser.py',141),
  ('term -> ID','term',1,'p_term','parser.py',150),
  ('term -> constant','term',1,'p_term','parser.py',151),
  ('term -> LPAREN expression RPAREN','term',3,'p_term','parser.py',152),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',162),
]
